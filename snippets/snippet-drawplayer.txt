
; Copies the 8x8 icon pointed to by SI to the X,Y location referenced
; by [draw_rect_xy_ptr] with a size of [draw_rect_w], [draw_rect_h].
; NOTE: [draw_rect_w] must be even!
draw_icon:
  mov cx, [draw_rect_h]

.copyLine:
  mov ax, [draw_rect_h]
  sub ax, cx  ; Now AX is the icon line number
  push cx

  mov di, [draw_rect_xy_ptr] ; dereference Y location
  add ax, [di+2] ; Now AX is the framebuffer row number

  ; Set DI to start byte of left side of line

  mov bx, ax      ; Faster alternative to dividing AX by 4: shift
  shr ax, 1       ; right twice for quotient, mask with 0b11 for
  shr ax, 1       ; remainder. Now AX is the row within the bank

  and bx, 0b11    ; BX = bank number (0-3)
  mov cl, 13      ; Faster alternative to multiplying BX by the
  shl bx, cl      ; bank width (0x2000): shift left by 13.
  ; Now BX is bank offset

  ; Calc byte index of pixel: BX += (AX * 320 + rect_bitblt.x) / 2
  push bx
  mov bx, 320
  push dx
  mul bx
  pop dx
  add ax, [di]   ; add X
  shr ax, 1      ; Because each byte encodes 2 pixels
  pop bx
  add ax, bx

  mov di, ax

  mov cx, [draw_rect_w]
  shr cx, 1      ; Because each byte encodes 2 pixels

.copyByte:
  lodsb            ; AL is a byte from the icon
  mov bl, [es:di]  ; BL is a byte from the framebuffer
  mov bh, bl

.copyLowNibble:
  mov ah, al
  and ah, 0x0f
  test ah, ah
  jz .copyHighNibble
  and bh, 0xf0
  add bh, ah

.copyHighNibble:
  and al, 0xf0
  test al, al
  jz .replaceByte
  and bh, 0x0f
  add bh, al

.replaceByte:
  mov al, bh
  stosb
  loop .copyByte

.doneCopyByte:
  pop cx
  loop .copyLine

  ret

; Draws a rectangle of color DL to the X,Y location referenced by
; [draw_rect_xy_ptr] with a size of [draw_rect_w], [draw_rect_h].
; NOTE: [draw_rect_w] must be even!
draw_rect:
  push bp     ; Locals:
  mov bp, sp  ; [bp-1]: flags: 0x1 = only fill inner pixels of first and last bytes
  sub sp, 3   ; [bp-3]: number of whole bytes to copy on each line

  mov dh, dl
  mov cl, 4
  shl dh, cl
  or dl, dh   ; Now DL contains color twice

  mov si, [draw_rect_xy_ptr]  ; address of X, Y
  mov ax, [si]                ; dereference again to get X
  and al, 0x1
  mov [bp-1], al

  mov bx, [draw_rect_w]
  shr bx, 1
  cmp ax, 0x1
  jne .afterSub1
  dec bx
.afterSub1:
  mov [bp-3], bx      ; # full bytes on each line

  mov cx, [draw_rect_h] ; Number of lines to copy

.copyLine:
  mov ax, [draw_rect_h]
  sub ax, cx
  push cx

  mov di, [draw_rect_xy_ptr] ; dereference Y location
  add ax, [di+2]

  ; Set SI and DI to start byte of left side of line
  mov si, ax      ; Faster alternative to dividing AX by 4: shift
  shr ax, 1       ; right twice for quotient, mask with 0b11 for
  shr ax, 1       ; remainder. Now AX = row within bank

  and si, 0b11    ; SI = bank number (0-3)
  mov cl, 13      ; Faster alternative to multiplying SI by the
  shl si, cl      ; bank width (0x2000): shift left by 13.

  ; Calc byte index of pixel: SI += (AX * 320 + rect_bitblt.x) / 2
  mov bx, 320
  push dx
  mul bx
  pop dx
  add ax, [di]   ; add X
  shr ax, 1      ; Because each byte encodes 2 pixels
  add si, ax

  mov di, si

  test byte [bp-1], 0x1
  jz .afterFirstByte
  mov al, [es:di]  ; load the pixel pair
  and al, 0xf0     ; mask out the bottom pixel (keeping the top)
  mov dh, dl
  and dh, 0x0f     ; mask out the top pixel
  or al, dh
  stosb
.afterFirstByte:

  mov cx, [bp-3]
  mov al, dl
  rep stosb         ; Copy CX bytes

  test byte [bp-1], 0x1
  jz .afterLastByte
  mov al, [es:di]  ; load the pixel pair
  and al, 0x0f     ; mask out the top pixel (keeping the bottom)
  mov dh, dl
  and dh, 0xf0     ; mask out the bottom pixel
  or al, dh
  stosb
.afterLastByte:

  pop cx
  loop .copyLine

.done:
  mov sp, bp      ; Destroy locals
  pop bp

  ret
